"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcreate_wasm_app"] = self["webpackChunkcreate_wasm_app"] || []).push([["index_js"],{

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _public_js_render_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./public/js/render.js */ \"./public/js/render.js\");\n\n\nconsole.log(\"[INFO] Start loading WASM ðŸš€\");\nconst wasm = __webpack_require__.e(/*! import() */ \"pkg_wasm_othello_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../pkg */ \"../pkg/wasm_othello.js\")).catch(console.error);\nconsole.log(\"[INFO] End loading WASM âœ…\");\n\nPromise.all([wasm]).then(async function (\n    [{ make_othello }]) {\n        {\n            async function run() {\n                let othello = make_othello();\n                let canvas = document.getElementById(\"canv\")\n                ;(0,_public_js_render_js__WEBPACK_IMPORTED_MODULE_0__.render)(canvas, othello)\n            }\n            run()\n        }\n});\n\n\n//# sourceURL=webpack://create-wasm-app/./index.js?");

/***/ }),

/***/ "./public/js/render.js":
/*!*****************************!*\
  !*** ./public/js/render.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"render\": () => (/* binding */ render)\n/* harmony export */ });\nconst SQUARE_SIZE = 80;\nconst WIDTH = 640;\nconst HEIGHT = 740;\nconst HEADER_HEIGHT = 100;\n\nconst GREEN = \"#090\";\nconst WHITE = \"#fff\";\nconst BLACK = \"#000\";\nconst GRAY = \"#b4b4b4\";\nconst DEEP_GRAY = \"#464646\";\n\nconst DEFAULT_BOARD =  [\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, -1, 1, 0, 0, 0,\n    0, 0, 0, 1, -1, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n]\n\nconst coord = coordinate()\n\nfunction render(canvas, othellot) {\n\n    canvas.width = WIDTH\n    canvas.height = HEIGHT\n\n    let ctx = canvas.getContext('2d');\n    let click_sound = document.getElementById(\"click\")\n\n    drawBoard(ctx);\n    drawDiscs(ctx, DEFAULT_BOARD);\n    showDisplay(ctx, [2,2], \"black\")\n\n    let click_handler = (e) => {\n        if (e.screenY < 100) {\n            return\n        }\n\n        let index = offset_to_index(e.offsetX, e.offsetY)\n        let diff = othellot.move_by_user(index)\n\n        if (diff === undefined) {\n            return\n        }\n\n        drawDiscs(ctx, diff)\n        click_sound.play()\n\n        let turn = othellot.which_turn()\n        let score = othellot.get_score()\n        showDisplay(ctx, score, turn)\n\n        if (turn == \"black\") {\n            return\n        } else if (turn == \"gameover\") {\n            play_gameover_sound(score)\n            return\n        }\n\n        setTimeout(() => {\n            for (let i = 0; i < 64; i++) {\n                let diff = othellot.move_by_ai()\n\n                drawDiscs(ctx, diff)\n                click_sound.play()\n\n                let turn = othellot.which_turn()\n                let score = othellot.get_score()\n                showDisplay(ctx, score, turn)\n\n                if (turn === \"black\") {\n                    return\n                } else if (turn === \"white\") {\n                    continue\n                } else if (turn === \"gameover\") {\n                    play_gameover_sound(score)\n                    return\n                }\n            }\n        }, 500)\n   }\n    canvas.addEventListener('click', click_handler);\n}\n\nfunction showDisplay(ctx, score, turn) {\n    let display\n    if (turn === \"gameover\") {\n        let result = score[0] > score[1] ? \"<WIN>\" : score[0] < score[1] ? \"<LOSE>\" : \"<DRAW>\"\n        display = result + ` BLACK: ${score[0]} / WHITE: ${score[1]}`\n    } else {\n        display = `BLACK: ${score[0]} / WHITE: ${score[1]}`\n    }\n\n    ctx.clearRect(0.0, 0.0, WIDTH, HEADER_HEIGHT);\n    ctx.fillStyle = GREEN\n    ctx.font = \"20px sans-serif\"\n    ctx.textAlign = \"center\"\n    ctx.fillText(display, WIDTH / 2, 40.0)\n}\n\nfunction play_gameover_sound(score) {\n    const win_sound= document.getElementById(\"win\")\n    const lose_sound = document.getElementById(\"lose\")\n    score[0] > score[1] ? win_sound.play() : lose_sound.play()\n}\n\nfunction drawBoard(ctx) {\n    ctx.clearRect(0, 0, WIDTH, HEIGHT);\n    ctx.fillStyle = BLACK\n    ctx.fillStyle = GREEN\n    ctx.fillRect(0, HEADER_HEIGHT, WIDTH, WIDTH)\n\n    for (var x = 0; x < 8; x++) {\n        for (var y = 0; y < 8; y++) {\n            ctx.strokeStyle = WHITE;\n            ctx.beginPath();\n            ctx.fillRect(x * SQUARE_SIZE, y * SQUARE_SIZE + HEADER_HEIGHT, SQUARE_SIZE, SQUARE_SIZE);\n            ctx.strokeRect(x * SQUARE_SIZE, y * SQUARE_SIZE + HEADER_HEIGHT, SQUARE_SIZE, SQUARE_SIZE);\n        }\n    }\n}\n\nfunction drawDiscs(ctx, diff) {\n    diff.forEach((v, i)=> {\n        if (v === 1) {\n            drawDisc(ctx, coord[i][\"x\"], coord[i][\"y\"], \"black\")\n        } else if  (v === -1) {\n            drawDisc(ctx, coord[i][\"x\"], coord[i][\"y\"], \"white\")\n        }\n    })\n}\n\nfunction drawDisc (ctx, x, y, color) {\n    let grad = ctx.createLinearGradient(x, y, x + SQUARE_SIZE, y + SQUARE_SIZE);\n    if (color === \"black\") {\n        grad.addColorStop(0, BLACK);\n        grad.addColorStop(0.4, DEEP_GRAY);\n        grad.addColorStop(1, DEEP_GRAY);\n    } else if (color === \"white\") {\n        grad.addColorStop(0, GRAY);\n        grad.addColorStop(0.4, WHITE);\n        grad.addColorStop(1, WHITE);\n    }\n    ctx.fillStyle = grad;\n    ctx.beginPath();\n    ctx.arc(x + SQUARE_SIZE / 2.0, y + SQUARE_SIZE / 2.0, SQUARE_SIZE / 2.2, 0.0, 2.0 * Math.PI);\n    ctx.fill()\n}\n\nfunction coordinate() {\n    let coord = new Array()\n    for (let x = 0; x < 8; x++) {\n        for (let y = 0; y < 8; y++) {\n            coord.push({ x: y * SQUARE_SIZE, y : x * SQUARE_SIZE + HEADER_HEIGHT })\n        }\n    }\n    return coord;\n}\n\nfunction offset_to_index(x, y) {\n    return 63 - (Math.floor(x / SQUARE_SIZE) + Math.floor((y - 100) / SQUARE_SIZE) * 8)\n}\n\n//# sourceURL=webpack://create-wasm-app/./public/js/render.js?");

/***/ })

}]);